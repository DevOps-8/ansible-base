---
- name: users | creating user accounts
  user: name={{ item.user }} password={{ item.pass }} shell={{ item.shell }} comment="{{ item.comment }}" state=present
  with_items: create_users
  when: create_users is defined and create_local_users and item.setup and not item.generate_keys and not item.system_account

- name: users | creating user accounts and generating ssh_keys
  user: name={{ item.user }} password={{ item.pass }} shell={{ item.shell }} comment="{{ item.comment }}" generate_ssh_key=yes state=present
  with_items: create_users
  when: create_users is defined and create_local_users and item.setup and item.generate_keys and not item.system_account

- name: users | creating system accounts
  user: name={{ item.user }} password={{ item.pass }} shell={{ item.shell }} comment="{{ item.comment }}" system=yes state=present
  with_items: create_users
  when: create_users is defined and create_local_users and item.setup and not item.generate_keys and item.system_account

- name: users | creating system accounts and generating ssh_keys
  user: name={{ item.user }} password={{ item.pass }} shell={{ item.shell }} comment="{{ item.comment }}" generate_ssh_key=yes system=yes state=present
  with_items: create_users
  when: create_users is defined and create_local_users and item.setup and item.generate_keys and item.system_account

- name: users | removing user accounts
  user: name={{ item.user }} password={{ item.pass }} state=absent
  with_items: create_users
  when: create_users is defined and create_local_users and not item.setup

- name: users | adding users to sudoers
  lineinfile: dest=/etc/sudoers regexp='^{{ item.user }} ALL' line='{{ item.user }} ALL=(ALL) NOPASSWD:ALL' validate='visudo -cf %s' state=present
  with_items: create_users
  when: create_users is defined and create_local_users and item.sudo

- name: users | removing users from sudoers
  lineinfile: dest=/etc/sudoers regexp='^{{ item.user }} ALL' line='{{ item.user }} ALL=(ALL) NOPASSWD:ALL' validate='visudo -cf %s' state=absent
  with_items: create_users
  when: create_users is defined and create_local_users and not item.sudo

- name: users | checking for existing rundeck ssh pub key(s)
  stat: path=ssh_pub_keys/{{ rundeck_framework_ssh_user }}@{{ rundeck_server }}.pub
  register: rundeck_ssh_pub_key
  when: rundeck_server is defined and rundeck_framework_ssh_user is defined and (rundeck_setup_rundeck_user is defined and rundeck_setup_rundeck_user)

- name: adding rundeck ssh pub key(s)
  authorized_key: user={{ rundeck_framework_ssh_user }}
                  key="{{ item }}"
  with_file:
    - 'ssh_pub_keys/{{ rundeck_framework_ssh_user }}@{{ rundeck_server }}.pub'
  when: rundeck_ssh_pub_key is defined and rundeck_ssh_pub_key.stat.exists
